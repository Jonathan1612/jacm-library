import ApiCuentasPorObjetoGasto, { IAgregarArray } from '@api/catalogo/ApiCuentasPorObjetoGasto';
import ApiControlGlobal from '@api/catalogo/ApiControlGlobal';
import { ApiError } from '@api/error/ApiError';
import {
  CustomButtonPrimary,
  CustomLoading,
  CustomTableSecundary,
  CustomThSortable,
  mostrarMensaje,
  ocultarMensaje,
  CustomTitle,
  CustomFormDynamicResponsive,
  CustomDialogoConfirmacion,
} from '@components/index';
import { mapToValueLabel } from '@utils/mapper';
import { FormikProps } from 'formik';
import React, { useEffect, useRef, useState } from 'react';
import { Container } from 'react-bootstrap';
import { FormSection, ITable, SelectItem } from 'types';
import { IFormularioCuentasPorObjetoGasto, useCuentasPorObjetoGastoStore } from '.';
import { useLocation, useNavigate } from 'react-router-dom';
import formBuscarFecha from './formBusquedaCalendarioCuentaPorObjetoGasto.json';
import { formatDateToIso } from '@utils/DateUtil';
import { FaTrash } from 'react-icons/fa';
import { HttpStatusCode } from 'axios';

type ObjetoGastoTablaItem = {
  objetoGasto: string;
  idObjetoGastos: { id: number; descripcion: string };
  idCostoAnioAct: { id: number; descripcion: string };
  idCostoAnioAnt: { id: number; descripcion: string };
  idConsumoAnioAct: { id: number; descripcion: string };
  idConsumoAnioAnt: { id: number; descripcion: string };
  idAlmacenAnioAct: { id: number; descripcion: string };
  idAlmacenAnioAnt: { id: number; descripcion: string };
  idDeudAntEmpAnioAct: { id: number; descripcion: string };
  idDeudAntEmpAnioAnt: { id: number; descripcion: string };
  idDeudGlosaCreaActAnt: { id: number; descripcion: string };
  idDeudGlosaCompActAnt: { id: number; descripcion: string };
  idMercanciasTransito: { id: number; descripcion: string };
  idAnticipoProveContr: { id: number; descripcion: string };
};

const AgregarFechaEfectivaCuentaPorObjetoGastoPage: React.FC = () => {
  const { resetearFormulario, setField, pageCatalogo, cargando } = useCuentasPorObjetoGastoStore();

  const location = useLocation();
  const { fechaEfectiva } = (location.state ?? {}) as { fechaEfectiva: string };
  const navigate = useNavigate();
  const formikConsultaRef = useRef<FormikProps<IFormularioCuentasPorObjetoGasto>>(null);
  const formikRef = useRef<FormikProps<any>>(null);
  const [fechaSeleccionada, setFechaSeleccionada] = useState<string>('');
  const [comboFechaEfectiva, setComboFechaEfectiva] = useState<SelectItem[]>([]);
  const [verDialogoConfirmacion, setVerDialogoConfirmacion] = useState(false);
  const [itemAEliminar, setItemAEliminar] = useState<any>(null);

  const [tableState, setTableState] = useState<ITable>({
    page: 1,
    size: 10,
    columnName: 'descripcion',
    asc: true,
  });

  // --- ORDENAMIENTO Y PAGINACIÓN LOCAL CON PRIORIDAD AL ÚLTIMO AGREGADO ---
  const [idUltimoAgregado, setIdUltimoAgregado] = useState<number | undefined>(undefined);

  useEffect(() => {
    // Leer el id del último agregado desde localStorage y limpiarlo después de usarlo
    const idLS = localStorage.getItem('cuentaObjetoGastoUltimoId');
    if (idLS) {
      setIdUltimoAgregado(Number(idLS));
      localStorage.removeItem('cuentaObjetoGastoUltimoId');
    }
  }, []);

  const columnMap: Record<string, string> = {
    id_cuentas_objeto_gasto: 'idObjetoGastos',
    descripcion: 'descripcion',
    id_costo_anio_act: 'idCostoAnioAct',
    id_costo_anio_ant: 'idCostoAnioAnt',
    id_consumo_anio_act: 'idConsumoAnioAct',
    id_consumo_anio_ant: 'idConsumoAnioAnt',
    id_mercancias_transito: 'idMercanciasTransito',
    id_almacen_anio_act: 'idAlmacenAnioAct',
    id_almacen_anio_ant: 'idAlmacenAnioAnt',
    id_deud_ant_emp_anio_act: 'idDeudAntEmpAnioAct',
    id_deud_ant_emp_anio_ant: 'idDeudAntEmpAnioAnt',
    id_deud_glosa_crea_act_ant: 'idDeudGlosaCreaActAnt',
    id_deud_glosa_comp_act_ant: 'idDeudGlosaCompActAnt',
    id_anticipo_prove_contr: 'idAnticipoProveContr',
  };

  const getComparableValue = (item: any, prop: string) => {
    const value = item[prop];
    if (value == null) return '';
    if (typeof value === 'object') {
      if ('descripcion' in value && value.descripcion != null) return value.descripcion;
      if ('label' in value && value.label != null) return value.label;
      if ('id' in value && value.id != null) return value.id;
    }
    return value;
  };

  const ordenarDatosLocalmente = (datos: any[]) => {
    if (!Array.isArray(datos) || datos.length <= 1) return datos;
    const prop = columnMap[tableState.columnName] || tableState.columnName;
    let resto = [...datos];
    let nuevo: any | undefined = undefined;
    if (idUltimoAgregado) {
      const idx = resto.findIndex((item) => Number(item.idObjetoGastos?.id) === Number(idUltimoAgregado));
      if (idx !== -1) {
        nuevo = resto[idx];
        resto.splice(idx, 1);
      }
    }
    const restoOrdenado = resto.sort((a, b) => {
      const aValue = getComparableValue(a, prop);
      const bValue = getComparableValue(b, prop);
      if (aValue == null && bValue == null) return 0;
      if (aValue == null) return tableState.asc ? -1 : 1;
      if (bValue == null) return tableState.asc ? 1 : -1;
      if (typeof aValue === 'number' && typeof bValue === 'number') {
        return tableState.asc ? aValue - bValue : bValue - aValue;
      }
      return tableState.asc
        ? String(aValue).localeCompare(String(bValue), 'es', { sensitivity: 'base' })
        : String(bValue).localeCompare(String(aValue), 'es', { sensitivity: 'base' });
    });
    return nuevo ? [nuevo, ...restoOrdenado] : restoOrdenado;
  };

  const paginarDatos = (datos: any[], page: number, size: number) => {
    const start = (page - 1) * size;
    return datos.slice(start, start + size);
  };

  const sortableHeaders = [
    { label: 'Objeto de Gasto', column: 'id_cuentas_objeto_gasto' },
    { label: 'Descripción', column: 'descripcion' },
    { label: 'Costo Año Act', column: 'id_costo_anio_act' },
    { label: 'Costo Año Ant', column: 'id_costo_anio_ant' },
    { label: 'Consumo Año Act', column: 'id_consumo_anio_act' },
    { label: 'Consumo Año Ant', column: 'id_consumo_anio_ant' },
    { label: 'Mercancía en Tránsito', column: 'id_mercancias_transito' },
    { label: 'Almacén Año Act', column: 'id_almacen_anio_act' },
    { label: 'Almacén Año Ant', column: 'id_almacen_anio_ant' },
    { label: 'Deud Ant Emp Año Act', column: 'id_deud_ant_emp_anio_act' },
    { label: 'Deud Ant Emp Año Ant', column: 'id_deud_ant_emp_anio_ant' },
    { label: 'Deud Glosa Crea Act Ant', column: 'id_deud_glosa_crea_act_ant' },
    { label: 'Deud Glosa Comp Act Ant', column: 'id_deud_glosa_comp_act_ant' },
    { label: 'Anticipo a Prove y Contr', column: 'id_anticipo_prove_contr' },
  ];

  useEffect(() => {
    inicializarCatalogos();
    return () => {
      resetearFormulario();
    };
  }, []);

  useEffect(() => {
    inicializarCatalogos();
    cargarDesdeLocalStorage();

    return () => {
      resetearFormulario();
    };
  }, []);

  const cargarDesdeLocalStorage = () => {
    const data = localStorage.getItem('cuentasObjetoGasto');
    if (!data) {
      setField('pageCatalogo', { content: [], numberOfElements: 0 });
      return;
    }

    const cuentas = JSON.parse(data);
    console.log('cuentas')
    console.log(cuentas)

    const valores = cuentas.flatMap((item: any) => item.valoresObjetoGastos ?? []);

    setField('pageCatalogo', {
      content: valores,
      numberOfElements: valores.length,
    });
  };

  const inicializarCatalogos = async () => {
    try {
      setField('cargando', true);

      const catalogoFechaEfectiva = await ApiCuentasPorObjetoGasto.comboFechaEfectiva(1);
      const catalogoControlGlobal = await ApiControlGlobal.obtenerCombo();

      setField('catalogoControlGlobal', catalogoControlGlobal);

      setComboFechaEfectiva(mapToValueLabel(catalogoFechaEfectiva, 'id', 'descripcion'));

      setField('cargando', false);
    } catch (error) {
      if (error instanceof ApiError) {
        mostrarMensaje('danger', error.message);
      }
    } finally {
      setField('cargando', false);
    }
  };

  const obtenerObjetoGasto = () => {
    // Concatenar itemAEliminar.objetoGasto y itemAEliminar.idObjetoGastos?.descripcion
    const id = itemAEliminar?.objetoGasto;
    const desc = itemAEliminar?.idObjetoGastos?.descripcion;
    if (id && desc) return `${id} - ${desc}`;
    if (id) return `${id}`;
    if (desc) return desc;
    return '';
  };

  const onAgregar = () => {
    ocultarMensaje();
    // Tomar la fecha seleccionada del form dinámico (formikRef)
    const fechaSeleccionadaForm = formikRef.current?.values.idFechaEfectiva;
    // Usar solo la fecha seleccionada en el formulario, si no hay, mostrar advertencia
    if (!fechaSeleccionadaForm) {
      mostrarMensaje('warning', 'Debe seleccionar una fecha efectiva.');
      return;
    }
    const fechaFormateada = formatDateToIso(fechaSeleccionadaForm);
    navigate('/contabilidad-general/catalogos/operacion/cuentas-objeto-gasto/agregar', {
      state: {
        fechaEfectiva: fechaFormateada,
      },
    });
  };

  const handleGuardar = async () => {
    const data = localStorage.getItem('cuentasObjetoGasto');
    const cuentas = data ? JSON.parse(data) : [];

    const valoresObjetoGastos = cuentas.flatMap((item: any) => item.valoresObjetoGastos ?? []);
    const idControl = cuentas[0]?.idControl ?? 1;
    // Tomar la fecha seleccionada en el calendario (form), si no existe usar la cargada
    const fechaSeleccionadaForm = formatDateToIso(formikRef.current?.values.idFechaEfectiva);
    const fechaFinal = fechaSeleccionadaForm || fechaEfectiva;

    if (!valoresObjetoGastos.length) {
      mostrarMensaje('warning', 'No hay datos para guardar.');
      return;
    }

    const payloadFinal: IAgregarArray = {
      idControl,
      fechaEfectiva: fechaFinal,
      valoresObjetoGastos: valoresObjetoGastos.map((item: any) => ({
        idObjetoGastos: item.idObjetoGastos.id,
        idCostoAnioAct: item.idCostoAnioAct.id,
        idCostoAnioAnt: item.idCostoAnioAnt.id,
        idConsumoAnioAct: item.idConsumoAnioAct.id,
        idConsumoAnioAnt: item.idConsumoAnioAnt.id,
        idAlmacenAnioAct: item.idAlmacenAnioAct.id,
        idAlmacenAnioAnt: item.idAlmacenAnioAnt.id,
        idDeudAntEmpAnioAct: item.idDeudAntEmpAnioAct.id,
        idDeudAntEmpAnioAnt: item.idDeudAntEmpAnioAnt.id,
        idDeudGlosaCreaActAnt: item.idDeudGlosaCreaActAnt.id,
        idDeudGlosaCompActAnt: item.idDeudGlosaCompActAnt.id,
        idMercanciasTransito: item.idMercanciasTransito.id,
        idAnticipoProveContr: item.idAnticipoProveContr.id,
      })),
    };


    try {
      const response = await ApiCuentasPorObjetoGasto.agregar(payloadFinal);
      mostrarMensaje('success', response.message); // LOG: Mensaje de éxito al guardar
      limpiarLocalStoragePorFecha();
      navigate('/contabilidad-general/catalogos/operacion/cuentas-objeto-gasto', {
        state: {
          idObjetoGasto: valoresObjetoGastos?.[0]?.idObjetoGastos?.id ?? null,
          successMessage: response.message, // PASAR mensaje de éxito por navigation state
        },
      });
      console.log('Navegando con successMessage:', response.message); // LOG de depuración
    } catch (error) {
      if (error instanceof ApiError) {
        mostrarMensaje(error.status !== HttpStatusCode.InternalServerError ? 'warning' : 'danger', error.message);
      }
    }
  };

  const onCancelar = () => {
    navigate('/contabilidad-general/catalogos/operacion/cuentas-objeto-gasto', {
      state: { fechaEfectiva },
    });
    limpiarLocalStoragePorFecha();
  };

  const limpiarLocalStoragePorFecha = () => {
    localStorage.getItem('cuentasObjetoGasto');
  };

  const onEliminar = () => {
    if (!itemAEliminar) return;

    const data = localStorage.getItem('cuentasObjetoGasto');
    if (!data) return;

    const cuentas = JSON.parse(data);

    const nuevasCuentas = cuentas
      .map((registro: any) => {
        const nuevosValores = (registro.valoresObjetoGastos ?? []).filter(
          (item: any) => item.idObjetoGastos?.id !== itemAEliminar.idObjetoGastos?.id
        );

        return { ...registro, valoresObjetoGastos: nuevosValores };
      })
      .filter((registro: any) => registro.valoresObjetoGastos.length > 0);

    if (nuevasCuentas.length > 0) {
      localStorage.setItem('cuentasObjetoGasto', JSON.stringify(nuevasCuentas));
    } else {
      localStorage.removeItem('cuentasObjetoGasto');
    }

    cargarDesdeLocalStorage();
   mostrarMensaje('success', 'Elemento eliminado localmente');
    setItemAEliminar(null);
  };

  const extraerId = (valor: any): string | number => {
    if (valor && typeof valor === 'object' && 'id' in valor) return valor.id ?? '';
    if (typeof valor === 'number') return valor !== 0 ? valor : '';
    if (typeof valor === 'string') {
      const id = valor.split('-')[0]?.trim();
      return id && id !== '0' ? id : '';
    }
    return '';
  };

  // Variables de datos para la tabla (fuera del return)
  const datosFiltrados = pageCatalogo?.content ?? [];
  const datosOrdenados = ordenarDatosLocalmente(datosFiltrados);
  const datosPaginados = paginarDatos(datosOrdenados, tableState.page, tableState.size);

  return (
    <Container>
      {cargando && <CustomLoading />}

      <div className="pb-3">
        <CustomTitle title="Alta de fecha efectiva" />
      </div>

      <CustomDialogoConfirmacion
        title="Eliminar Objeto de Gasto"
        message={`¿Está seguro de remover el Objeto de Gasto "${obtenerObjetoGasto()}"?`}
        cancelLabel="Cancelar"
        confirmLabel="Aceptar"
        show={verDialogoConfirmacion}
        order={2}
        onCancel={() => {
          setItemAEliminar(null);
          setVerDialogoConfirmacion(false);
        }}
        onConfirm={() => {
          onEliminar();
          setVerDialogoConfirmacion(false);
        }}
      />

      <CustomFormDynamicResponsive
        key={fechaSeleccionada || fechaEfectiva}
        innerRef={formikRef}
        sections={formBuscarFecha as FormSection[]}
        initialValues={{idControlGlobal: "SATMX", idFechaEfectiva: fechaEfectiva ?? new Date() }}
      />

      <div className="text-start mt-4 mb-4">
        <CustomButtonPrimary className="me-4" onClick={onAgregar}>
          Agregar
        </CustomButtonPrimary>
      </div>

      <CustomTableSecundary
        data={datosPaginados}
        totalItems={datosOrdenados.length}
        itemsPerPage={tableState.size}
        currentPage={tableState.page}
        onPageChange={(page, size) => {
          setTableState({ ...tableState, page, size });
          localStorage.setItem('ordenTablaCuentaObjetoGasto', JSON.stringify({ ...tableState, page, size }));
        }}
        onItemsPerPageChange={(size) => {
          setTableState({ ...tableState, page: 1, size });
          localStorage.setItem('ordenTablaCuentaObjetoGasto', JSON.stringify({ ...tableState, page: 1, size }));
        }}
        headers={
          <>
            <CustomThSortable
              headers={sortableHeaders}
              currentColumn={tableState.columnName}
              asc={tableState.asc}
              onSort={({ columnName, asc }) => {
                setTableState({ ...tableState, columnName, asc });
                localStorage.setItem('ordenTablaCuentaObjetoGasto', JSON.stringify({ ...tableState, columnName, asc }));
              }}
            />
            <th>Eliminar</th>
          </>
        }
        renderItem={(item: ObjetoGastoTablaItem) => (
          <>
            <td>{item.objetoGasto}</td>
            <td>{item.idObjetoGastos?.descripcion}</td>
            <td>{extraerId(item.idCostoAnioAct?.descripcion)}</td>
            <td>{extraerId(item.idCostoAnioAnt?.descripcion)}</td>
            <td>{extraerId(item.idConsumoAnioAct?.descripcion)}</td>
            <td>{extraerId(item.idConsumoAnioAnt?.descripcion)}</td>
            <td>{extraerId(item.idMercanciasTransito?.descripcion)}</td>
            <td>{extraerId(item.idAlmacenAnioAct?.descripcion)}</td>
            <td>{extraerId(item.idAlmacenAnioAnt?.descripcion)}</td>
            <td>{extraerId(item.idDeudAntEmpAnioAct?.descripcion)}</td>
            <td>{extraerId(item.idDeudAntEmpAnioAnt?.descripcion)}</td>
            <td>{extraerId(item.idDeudGlosaCreaActAnt?.descripcion)}</td>
            <td>{extraerId(item.idDeudGlosaCompActAnt?.descripcion)}</td>
            <td>{extraerId(item.idAnticipoProveContr?.descripcion)}</td>

            <td className="text-center">
              <FaTrash
                size={20}
                onClick={() => {
                  setItemAEliminar(item);
                  setVerDialogoConfirmacion(true);
                }}
                style={{ cursor: 'pointer' }}
              />
            </td>
          </>
        )}
      />
      <div className="d-flex justify-content-evenly">
        <CustomButtonPrimary onClick={() => handleGuardar()}>Guardar</CustomButtonPrimary>
        <CustomButtonPrimary
          onClick={() => {
            onCancelar();
          }}>
          Cancelar
        </CustomButtonPrimary>
      </div>
    </Container>
  );
};

export default AgregarFechaEfectivaCuentaPorObjetoGastoPage;